local p = require('neg.palette')

-- Treesitter + LSP semantic token links
return {
  -- Core language captures: set explicit styles to avoid relying on builtins
  -- TS-only comments styling (do not depend on legacy Comment group)
  ['@comment']={ fg = p.comment_color, italic = true },
  ['@keyword']={ fg = p.keyword2_color },
  ['@keyword.function']={ fg = p.keyword1_color },
  ['@keyword.operator']={ fg = p.keyword2_color },
  ['@type']={ fg = p.keyword2_color },
  ['@type.builtin']={ fg = p.keyword3_color },
  ['@function']={ fg = p.function_color },
  ['@function.call']={ link = '@function' },
  ['@method']={ link = '@function' },
  ['@method.call']={ link = '@function' },
  ['@constant']={ fg = p.literal2_color },
  ['@string']={ fg = p.string_color },
  ['@number']={ fg = p.keyword1_color },
  ['@boolean']={ fg = p.literal3_color },
  ['@operator']={ fg = p.keyword2_color },
  ['@namespace']={ fg = p.identifier_color },
  ['@parameter']={ fg = p.identifier_color },
  ['@variable']={ fg = p.variable_color },
  ['@variable']={fg=p.variable_color},
  ['@variable.parameter']={link='@parameter'},
  ['@variable.member']={link='@field'},
  ['@module']={link='@namespace'},
  ['@number.float']={link='@float'},
  ['@string.special.symbol']={link='@symbol'},
  ['@string.regexp']={link='@string.regex'},
  ['@variable.builtin']={ fg = p.identifier_color, italic = true },
  ['@type.definition']={ link = '@type' },
  -- explicit anchors for linked captures above
  ['@float']={ fg = p.literal3_color },
  ['@symbol']={ fg = p.literal2_color },
  ['@string.regex']={ fg = p.string_color },

  -- Additional common captures
  ['@attribute']={ fg = p.identifier_color },
  ['@constructor']={ link='@function' },
  ['@constant.builtin']={ link='@constant' },
  ['@function.builtin']={ link='@function' },
  ['@function.macro']={ fg = p.function_color },
  ['@property']={ fg = p.identifier_color },
  ['@field']={ fg = p.identifier_color },
  ['@punctuation.bracket']={ fg = p.delimiter_color },
  ['@punctuation.delimiter']={ fg = p.delimiter_color },
  ['@string.escape']={ fg = p.literal2_color },
  ['@string.special.url']={ underline = true, fg = p.keyword4_color },
  ['@character']={ fg = p.string_color },

  -- Legacy @text.* â†’ modern @markup.*
  ['@text.strong']={link='@markup.strong'},
  ['@text.emphasis']={link='@markup.italic'},
  ['@text.underline']={link='@markup.underline'},
  ['@text.strike']={link='@markup.strikethrough'},
  ['@text.title']={link='@markup.heading'},
  ['@text.quote']={link='@markup.quote'},
  ['@text.uri']={link='@markup.link.url'},
  ['@text.math']={link='@markup.math'},
  ['@text.environment']={link='@markup.environment'},
  ['@text.environment.name']={link='@markup.environment.name'},
  ['@text.reference']={link='@markup.link'},
  ['@text.literal']={link='@markup.raw'},
  ['@text.literal.block']={link='@markup.raw.block'},
  ['@string.special']={link='@markup.link.label'},
  ['@punctuation.special']={ fg = p.delimiter_color },

  -- Markup base styles (TS-only)
  ['@markup.strong']={ bold = true },
  ['@markup.italic']={ italic = true },
  ['@markup.underline']={ underline = true },
  ['@markup.strikethrough']={ strikethrough = true },
  ['@markup.heading']={ bold = true },
  ['@markup.quote']={ fg = p.comment_color, italic = true },
  ['@markup.link.url']={ underline = true, fg = p.keyword4_color },
  ['@markup.link.label']={ underline = true },
  ['@markup.raw']={ fg = p.string_color },
  ['@markup.raw.block']={ fg = p.string_color },

  -- Helix captures
  ['@function.method']={link='@method'},
  ['@function.method.call']={link='@method.call'},

  -- Comment severities
  ['@comment.todo']={link='DiagnosticInfo'},
  ['@comment.warning']={link='DiagnosticWarn'},
  ['@comment.error']={link='DiagnosticError'},
  ['@comment.note']={link='DiagnosticHint'},
  ['@text.todo']={link='@comment.todo'},
  ['@text.danger']={link='@comment.error'},
  ['@text.warning']={link='@comment.warning'},
  ['@text.note']={link='@comment.note'},

  -- Diff groups
  ['@diff.plus']={ fg = p.diff_add_color },
  ['@diff.minus']={ fg = p.diff_delete_color },
  ['@diff.delta']={ fg = p.diff_change_color },
  ['@text.diff.add']={link='@diff.plus'},
  ['@text.diff.delete']={link='@diff.minus'},
  ['@text.diff.change']={link='@diff.delta'},

  -- Keyword families
  ['@keyword.directive']={link='@preproc'},
  ['@keyword.storage']={link='@storageclass'},
  ['@keyword.conditional']={link='@conditional'},
  ['@keyword.debug']={link='@debug'},
  ['@keyword.exception']={link='@exception'},
  ['@keyword.import']={link='@include'},
  ['@keyword.repeat']={link='@repeat'},
  ['@keyword.operator']={link='@operator'},
  ['@keyword.return']={link='@keyword'},

  -- Preprocessor/keywords (explicit TS targets)
  ['@preproc']={ fg = p.preproc_light_color },
  ['@define']={ fg = p.preproc_dark_color },
  ['@include']={ fg = p.include_color },
  ['@macro']={ link='@function.macro' },
  ['@conditional']={ fg = p.keyword1_color },
  ['@repeat']={ fg = p.keyword1_color },
  ['@label']={ fg = p.keyword3_color },
  ['@exception']={ fg = p.red_blood_color },
  ['@storageclass']={ fg = p.keyword1_color },

  -- HTML/XML-like tags
  ['@tag']={ fg = p.tag_color },
  ['@tag.delimiter']={ fg = p.keyword2_color },
  ['@tag.attribute']={ fg = p.identifier_color },

  -- LSP semantic tokens
  ['@lsp.type.class']={link='@type'},
  ['@lsp.type.struct']={link='@type'},
  ['@lsp.type.interface']={link='@type'},
  ['@lsp.type.enum']={link='@type'},
  ['@lsp.type.type']={link='@type'},
  ['@lsp.type.typeAlias']={link='@type.definition'},
  ['@lsp.type.typeParameter']={link='@type'},
  ['@lsp.type.namespace']={link='@namespace'},
  ['@lsp.type.parameter']={link='@parameter'},
  ['@lsp.type.variable']={link='@variable'},
  ['@lsp.type.property']={link='@property'},
  ['@lsp.type.enumMember']={link='@constant'},
  ['@lsp.type.function']={link='@function'},
  ['@lsp.type.macro']={link='@function.macro'},
  ['@lsp.type.method']={link='@method'},
  ['@lsp.type.event']={link='@type'},
  ['@lsp.type.operator']={link='@operator'},
  ['@lsp.type.modifier']={link='@keyword'},
  ['@lsp.type.builtinType']={link='@type.builtin'},
  ['@lsp.type.comment']={link='@comment'},
  ['@lsp.type.string']={link='@string'},
  ['@lsp.type.boolean']={link='@boolean'},
  ['@lsp.type.number']={link='@number'},
  ['@lsp.type.regexp']={link='@string.regex'},
  ['@lsp.type.escapeSequence']={link='@string.escape'},
  ['@lsp.type.formatSpecifier']={link='@string.special'},

  -- LSP modifiers
  ['@lsp.typemod.variable.readonly']={link='@constant'},
  ['@lsp.typemod.variable.global']={link='@constant'},
  ['@lsp.typemod.variable.static']={link='@constant'},
  ['@lsp.typemod.variable.defaultLibrary']={link='@variable.builtin'},
  ['@lsp.typemod.function.defaultLibrary']={link='@function.builtin'},
  ['@lsp.typemod.method.defaultLibrary']={link='@function.builtin'},
  ['@lsp.typemod.class.defaultLibrary']={link='@type.builtin'},
  ['@lsp.typemod.macro.defaultLibrary']={link='@function.macro'},
  ['@lsp.typemod.enum.defaultLibrary']={link='@type.builtin'},
  ['@lsp.typemod.type.defaultLibrary']={link='@type.builtin'},
  ['@lsp.typemod.deprecated']={ strikethrough = true, fg = p.comment_color },
  -- extra common modifiers
  ['@lsp.typemod.variable.declaration']={link='@variable'},
  ['@lsp.typemod.variable.definition']={link='@variable'},
  ['@lsp.typemod.variable.reference']={link='@variable'},
  ['@lsp.typemod.parameter.readonly']={link='@parameter'},
  ['@lsp.typemod.property.readonly']={link='@constant'},
  ['@lsp.typemod.method.static']={link='@method'},
  ['@lsp.typemod.function.async']={link='@function'},
  ['@lsp.typemod.keyword.async']={link='@keyword'},
}
